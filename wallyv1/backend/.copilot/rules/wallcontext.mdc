...excerpt from packages/frame-core/src/wallet/ethereum.ts

import type {
  EthProviderWireEvent,
  FrameClientEvent,
  MiniAppHostCapability,
} from '@farcaster/frame-core'
import type {
  AnnounceProviderParameters,
  AnnounceProviderReturnType,
  EIP1193Provider,
  EIP6963ProviderDetail,
} from 'mipd'
import * as Provider from 'ox/Provider'
import * as RpcRequest from 'ox/RpcRequest'
import * as RpcResponse from 'ox/RpcResponse'
import { frameHost } from './frameHost.ts'

const emitter = Provider.createEmitter()
const store = RpcRequest.createStore()

type GenericProviderRpcError = {
  code: number
  details?: string
}

function toProviderRpcError({
  code,
  details,
}: GenericProviderRpcError): Provider.ProviderRpcError {
  switch (code) {
    case 4001:
      return new Provider.UserRejectedRequestError()
    case 4100:
      return new Provider.UnauthorizedError()
    case 4200:
      return new Provider.UnsupportedMethodError()
    case 4900:
      return new Provider.DisconnectedError()
    case 4901:
      return new Provider.ChainDisconnectedError()
    default:
      return new Provider.ProviderRpcError(
        code,
        details ?? 'Unknown provider RPC error',
      )
  }
}

export const ethereumProvider: Provider.Provider = Provider.from({
  ...emitter,
  async request(args) {
    // @ts-expect-error
    const request = store.prepare(args)

    try {
      const response = await frameHost
        .ethProviderRequestV2(request)
        .then((res) => RpcResponse.parse(res, { request, raw: true }))

      if (response.error) {
        throw toProviderRpcError(response.error)
      }

      return response.result
    } catch (e) {
      // ethProviderRequestV2 not supported, fall back to v1
      if (
        e instanceof Error &&
        e.message.match(/cannot read property 'apply'/i)
      ) {
        return await frameHost.ethProviderRequest(request)
      }

      if (
        e instanceof Provider.ProviderRpcError ||
        e instanceof RpcResponse.BaseError
      ) {
        throw e
      }

      throw new RpcResponse.InternalError({
        message: e instanceof Error ? e.message : undefined,
      })
    }
  },
})

export async function getEthereumProvider(): Promise<
  Provider.Provider | undefined
> {
  try {
    const capabilities = await frameHost.getCapabilities()
    if (
      !capabilities.includes('wallet.getEthereumProvider') &&
      !capabilities.includes('wallet.getEvmProvider' as MiniAppHostCapability)
    ) {
      // We used getEvmProvider for a short period before getEthereumProvider.
      // In case we're talking to an old host, we check the old key.
      return undefined
    }
    return ethereumProvider
  } catch {
    // If this is an old frame host that doesn't support getCapabilities,
    // getEthereumProvider will assume that it's supported
    return ethereumProvider
  }
}

function announceEvmProvider(
  detail: AnnounceProviderParameters,
): AnnounceProviderReturnType {
  const event: CustomEvent<EIP6963ProviderDetail> = new CustomEvent(
    'eip6963:announceProvider',
    { detail: Object.freeze(detail) },
  )

  window.dispatchEvent(event)

  const handler = () => window.dispatchEvent(event)
  window.addEventListener('eip6963:requestProvider', handler)
  return () => window.removeEventListener('eip6963:requestProvider', handler)
}

// Required to pass SSR
if (typeof document !== 'undefined') {
  // forward eip6963:requestProvider events to the host
  document.addEventListener('eip6963:requestProvider', () => {
    frameHost.eip6963RequestProvider()
  })

  // react native webview events
  document.addEventListener('FarcasterFrameEthProviderEvent', (event) => {
    if (event instanceof MessageEvent) {
      const ethProviderEvent = event.data as EthProviderWireEvent
      // @ts-expect-error
      emitter.emit(ethProviderEvent.event, ...ethProviderEvent.params)
    }
  })

  document.addEventListener('FarcasterFrameEvent', (event) => {
    if (event instanceof MessageEvent) {
      const frameEvent = event.data as FrameClientEvent
      if (frameEvent.event === 'eip6963:announceProvider') {
        announceEvmProvider({
          info: frameEvent.info,
          provider: ethereumProvider as EIP1193Provider,
        })
      }
    }
  })
}

// Required to pass SSR
if (typeof window !== 'undefined') {
  // forward eip6963:requestProvider events to the host
  window.addEventListener('eip6963:requestProvider', () => {
    frameHost.eip6963RequestProvider()
  })

  // web events
  window.addEventListener('message', (event) => {
    if (event instanceof MessageEvent) {
      if (event.data.type === 'frameEthProviderEvent') {
        const ethProviderEvent = event.data as EthProviderWireEvent
        // @ts-expect-error
        emitter.emit(ethProviderEvent.event, ...ethProviderEvent.params)
      }
    }
  })

  window.addEventListener('message', (event) => {
    if (event instanceof MessageEvent) {
      if (event.data.type === 'frameEvent') {
        const frameEvent = event.data.event as FrameClientEvent
        if (frameEvent.event === 'eip6963:announceProvider') {
          announceEvmProvider({
            info: frameEvent.info,
            provider: ethereumProvider as EIP1193Provider,
          })
        }
      }
    }
  })
}


...packages/frame-core/src/wallet/index.ts
export * as Ethereum from './ethereum.ts'

...packages/frame-core/src/types.ts

import type {
  AddMiniApp,
  ComposeCast,
  Ready,
  SendToken,
  SignIn,
  SwapToken,
  ViewCast,
  ViewProfile,
  ViewToken,
} from './actions/index.ts'
import type { FrameContext } from './context.ts'
import type {
  EventFrameAdded,
  EventFrameRemoved,
  EventNotificationsDisabled,
  EventNotificationsEnabled,
} from './schemas/index.ts'
import type { SolanaRequestFn, SolanaWireRequestFn } from './solana.ts'
import type { Ethereum } from './wallet/index.ts'

export type SetPrimaryButtonOptions = {
  text: string
  loading?: boolean
  disabled?: boolean
  hidden?: boolean
}

// start backwards compat, remove in 1.0
export * from './wallet/ethereum.ts'
export { DEFAULT_READY_OPTIONS, ReadyOptions } from './actions/Ready.ts'
export type SignInOptions = SignIn.SignInOptions
// end backwards compat

export type SetPrimaryButton = (options: SetPrimaryButtonOptions) => void

export const miniAppHostCapabilityList: [string, ...string[]] = [
  'wallet.getEthereumProvider',
  'wallet.getSolanaProvider',
  'actions.ready',
  'actions.openUrl',
  'actions.close',
  'actions.setPrimaryButton',
  'actions.addMiniApp',
  'actions.signIn',
  'actions.viewCast',
  'actions.viewProfile',
  'actions.composeCast',
  'actions.viewToken',
  'actions.sendToken',
  'actions.swapToken',
]

export type MiniAppHostCapability =
  | 'wallet.getEthereumProvider'
  | 'wallet.getSolanaProvider'
  | 'actions.ready'
  | 'actions.openUrl'
  | 'actions.close'
  | 'actions.setPrimaryButton'
  | 'actions.addMiniApp'
  | 'actions.signIn'
  | 'actions.viewCast'
  | 'actions.viewProfile'
  | 'actions.composeCast'
  | 'actions.viewToken'
  | 'actions.sendToken'
  | 'actions.swapToken'

export type GetCapabilities = () => Promise<MiniAppHostCapability[]>

// Returns a list of CAIP-2 identifiers
export type GetChains = () => Promise<string[]>

export type WireFrameHost = {
  context: FrameContext
  close: () => void
  ready: Ready.Ready
  openUrl: (url: string) => void
  signIn: SignIn.WireSignIn
  setPrimaryButton: SetPrimaryButton
  ethProviderRequest: Ethereum.EthProvideRequest
  ethProviderRequestV2: Ethereum.RpcTransport
  eip6963RequestProvider: () => void
  solanaProviderRequest?: SolanaWireRequestFn
  addFrame: AddMiniApp.WireAddMiniApp
  viewCast: ViewCast.ViewCast
  viewProfile: ViewProfile.ViewProfile
  viewToken: ViewToken.ViewToken
  sendToken: SendToken.SendToken
  swapToken: SwapToken.SwapToken
  composeCast: <close extends boolean | undefined = undefined>(
    options: ComposeCast.Options<close>,
  ) => Promise<ComposeCast.Result<close>>
  getCapabilities: GetCapabilities
  getChains: GetChains
}

export type FrameHost = {
  context: FrameContext
  close: () => void
  ready: Ready.Ready
  openUrl: (url: string) => void
  signIn: SignIn.SignIn
  setPrimaryButton: SetPrimaryButton
  ethProviderRequest: Ethereum.EthProvideRequest
  ethProviderRequestV2: Ethereum.RpcTransport
  /**
   * Receive forwarded eip6963:requestProvider events from the frame document.
   * Hosts must emit an EventEip6963AnnounceProvider in response.
   */
  eip6963RequestProvider: () => void
  solanaProviderRequest?: SolanaRequestFn
  addFrame: AddMiniApp.AddMiniApp
  viewCast: ViewCast.ViewCast
  viewProfile: ViewProfile.ViewProfile
  viewToken: ViewToken.ViewToken
  sendToken: SendToken.SendToken
  swapToken: SwapToken.SwapToken
  composeCast: <close extends boolean | undefined = undefined>(
    options: ComposeCast.Options<close>,
  ) => Promise<ComposeCast.Result<close>>
  getCapabilities: GetCapabilities
  getChains: GetChains
}

export type EventFrameAddRejected = {
  event: 'frame_add_rejected'
  reason: AddMiniApp.AddMiniAppRejectedReason
}

export type EventPrimaryButtonClicked = {
  event: 'primary_button_clicked'
}

export type FrameClientEvent =
  | EventFrameAdded
  | EventFrameAddRejected
  | EventFrameRemoved
  | EventNotificationsEnabled
  | EventNotificationsDisabled
  | EventPrimaryButtonClicked
  | Ethereum.EventEip6963AnnounceProvider